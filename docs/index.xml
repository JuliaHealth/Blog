<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>The JuliaHealth Blog</title>
<link>https://juliahealth.org/JuliaHealthBlog/</link>
<atom:link href="https://juliahealth.org/JuliaHealthBlog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.47</generator>
<lastBuildDate>Fri, 30 Aug 2024 04:00:00 GMT</lastBuildDate>
<item>
  <title>GSoC ’24: Enhancements to KomaMRI.jl GPU Support</title>
  <dc:creator>Ryan Kierulf</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html</link>
  <description><![CDATA[ 




<section id="hi" class="level1">
<h1>Hi! 👋</h1>
<p>I am Ryan, an MS student currently studying computer science at the University of Wisconsin-Madison. Looking for a project to work on this summer, my interest in high-performance computing and affinity for the Julia programming language drew me to Google Summer of Code, where I learned about this project opportunity to work on enhancing GPU support for KomaMRI.jl.</p>
<p>In this post, I’d like to summarize what I did this summer and everything I learned along the way!</p>
<blockquote class="blockquote">
<p>If you want to learn more about me, you can connect with me here: <a href="https://www.linkedin.com/in/ryan-kierulf-022062201/"><strong>LinkedIn</strong></a>, <a href="https://github.com/rkierulf"><strong>GitHub</strong></a></p>
</blockquote>
</section>
<section id="what-is-komamri" class="level1">
<h1>What is KomaMRI?</h1>
<p><a href="https://github.com/JuliaHealth/KomaMRI.jl">KomaMRI</a> is a Julia package for efficiently simulating Magnetic Resonance Imaging (MRI) acquisitions. MRI simulation is a useful tool for researchers, as it allows testing new pulse sequences to analyze the signal output and image reconstruction quality without needing to actually take an MRI, which may be time or cost-prohibitive.</p>
<p>In contrast to many other MRI simulators, KomaMRI.jl is open-source, cross-platform, and comes with an intuitive user interface (To learn more about KomaMRI, you can read the paper introducing it <a href="https://onlinelibrary.wiley.com/doi/full/10.1002/mrm.29635">here</a>). However, being developed fairly recently, there are still new features that can be added and optimization to be done.</p>
</section>
<section id="project-goals" class="level1">
<h1>Project Goals</h1>
<p>The goals outlined by Carlos (my project mentor) and I the beginning of this summer were:</p>
<ol type="1">
<li><p>Extend GPU support beyond CUDA to include AMD, Intel, and Apple Silicon GPUs, through the packages <a href="https://github.com/JuliaGPU/AMDGPU.jl">AMDGPU.jl</a>, <a href="https://github.com/JuliaGPU/oneAPI.jl">oneAPI.jl</a>, and <a href="https://github.com/JuliaGPU/Metal.jl">Metal.jl</a></p></li>
<li><p>Create a CI pipeline to be able to test each of the GPU backends</p></li>
<li><p>Create a new kernel-based simulation method optimized for the GPU, which we expected would outperform array broadcasting</p></li>
<li><p>(Stretch Goal) Look into ways to support running distributed simulations across multiple nodes or GPUs</p></li>
</ol>
</section>
<section id="step-1-support-for-different-gpu-backends" class="level1">
<h1>Step 1: Support for Different GPU backends</h1>
<p>Previously, KomaMRI’s support for GPU acceleration worked by converting each array used within the simulation to a <code>CuArray</code>, the device array type defined in <a href="https://github.com/JuliaGPU/CUDA.jl">CUDA.jl</a>. This was done through a general <code>gpu</code> function. The inner simulation code is GPU-agnostic, as the same operations can be performed on a CuArray or a plain CPU Array. This approach is good for extensibility, as it does not require writing different simulation code for the CPU / GPU, or different GPU backends, and would only work in a language like Julia based on runtime dispatch!</p>
<p>To extend this to multiple GPU backends, all that is needed is to generalize the <code>gpu</code> function to convert to either the device types of CUDA.jl, AMDGPU.jl, Metal.jl, or oneAPI.jl, depending on which backend is being used. To give an idea of what the gpu conversion code looked like before, here is a snippet:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KomaCUDAAdaptor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt_storage</span>(to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KomaCUDAAdaptor</span>, x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CUDA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cu</span>(x)</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpu</span>(x)</span>
<span id="cb1-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">check_use_cuda</span>()</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> use_cuda[] ? <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KomaCUDAAdaptor</span>(), x), x; exclude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_isleaf) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> x</span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#CPU adaptor</span></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">struct</span> KomaCPUAdaptor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb1-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt_storage</span>(to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KomaCPUAdaptor</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AbstractArray</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Array</span>, x)</span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt_storage</span>(to<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KomaCPUAdaptor</span>, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">AbstractRange</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KomaCPUAdaptor</span>(), x), x)</span></code></pre></div>
<p>The <code>fmap</code> function is from the package <code>Functors.jl</code> and can recursively apply a function to a struct tagged with <code>@functor</code>. The function being applied is <code>adapt</code> from <code>Adapt.jl</code>, which will call the lower-level <code>adapt_storage</code> function to actually convert to / from the device type. The second parameter to <code>adapt</code> is what is being adapted, and the first is what it is being adapted to, which in this case is a custom adapter struct <code>KomaCUDAAdapter</code>.</p>
<p>One possible approach to generalize to different backends would be to define additional adapter structs for each backend and corresponding <code>adapt_storage</code> functions. This is what the popular machine learning library <a href="https://github.com/FluxML/Flux.jl">Flux.jl</a> does. However, there is a simpler way!</p>
<p>Each backend package (CUDA.jl, Metal.jl, etc.) already defines <code>adapt_storage</code> functions for converting different types to / from corresponding device type. Reusing these functions is preferable to defining our own since, not only does it save work, but it allows us to rely on the expertise of the developers who wrote those packages! If there is an issue with types being converted incorrectly that is fixed in one of those packages, then we would not need to update our code to get this fix since we are using the definitions they created.</p>
<p>Our final <code>gpu</code> and <code>cpu</code> functions are very simple. The <code>backend</code> parameter is a type derived from the abstract <code>Backend</code> type of <a href="https://github.com/JuliaGPU/KernelAbstractions.jl"><code>KernelAbstractions.jl</code></a>, which is extended by each of the backend packages:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">KernelAbstractions</span> as KA</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">gpu</span>(x, backend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">KA.GPU</span>)</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(backend, x), x; exclude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_isleaf)</span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cpu</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">adapt</span>(KA.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">CPU</span>(), x), x, exclude<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>_isleaf)</span></code></pre></div>
<p>The other work needed to generalize our GPU support involved switching to use <a href="https://pkgdocs.julialang.org/v1/creating-packages/#Conditional-loading-of-code-in-packages-(Extensions)">package extensions</a> to avoid having each of the backend packages as an explicit dependency, and defining some basic GPU functions for backend selection and printing information about available GPU devices. The pull request for adding support for multiple backends is linked below:</p>
<blockquote class="blockquote">
<p>https://github.com/JuliaHealth/KomaMRI.jl/pull/405</p>
</blockquote>
</section>
<section id="step-2-buildkite-ci" class="level1">
<h1>Step 2: Buildkite CI</h1>
<p>At the time the above pull request was merged, we weren’t sure whether the added support for AMD and Intel GPUs actually worked, since we only had access to CUDA and Apple Silicon GPUs. So the next step was to set up a CI to test each GPU backend. To do this, we used <a href="https://github.com/JuliaGPU/KernelAbstractions.jl">Buildkite</a>, which is a CI platform that many other Julia packages also use. Since there were many examples to follow, setting up our testing pipeline was not too difficult. Each step of the pipeline does the required environment setup and then calls <code>Pkg.test()</code> for KomaMRICore. As an example, here is what the AMDGPU step of our pipeline looks like:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource {yml} number-lines code-with-copy"><code class="sourceCode"><span id="cb3-1">      - label: "AMDGPU: Run tests on v{{matrix.version}}"</span>
<span id="cb3-2">        matrix:</span>
<span id="cb3-3">          setup:</span>
<span id="cb3-4">            version:</span>
<span id="cb3-5">              - "1"</span>
<span id="cb3-6">        plugins:</span>
<span id="cb3-7">          - JuliaCI/julia#v1:</span>
<span id="cb3-8">              version: "{{matrix.version}}"</span>
<span id="cb3-9">          - JuliaCI/julia-coverage#v1:</span>
<span id="cb3-10">              codecov: true</span>
<span id="cb3-11">              dirs:</span>
<span id="cb3-12">                - KomaMRICore/src</span>
<span id="cb3-13">                - KomaMRICore/ext</span>
<span id="cb3-14">        command: |</span>
<span id="cb3-15">          julia -e 'println("--- :julia: Instantiating project")</span>
<span id="cb3-16">              using Pkg</span>
<span id="cb3-17">              Pkg.develop([</span>
<span id="cb3-18">                  PackageSpec(path=pwd(), subdir="KomaMRIBase"),</span>
<span id="cb3-19">                  PackageSpec(path=pwd(), subdir="KomaMRICore"),</span>
<span id="cb3-20">              ])'</span>
<span id="cb3-21">          </span>
<span id="cb3-22">          julia --project=KomaMRICore/test -e 'println("--- :julia: Add AMDGPU to test environment")</span>
<span id="cb3-23">              using Pkg</span>
<span id="cb3-24">              Pkg.add("AMDGPU")'</span>
<span id="cb3-25">          </span>
<span id="cb3-26">          julia -e 'println("--- :julia: Running tests")</span>
<span id="cb3-27">              using Pkg</span>
<span id="cb3-28">              Pkg.test("KomaMRICore"; coverage=true, test_args=["AMDGPU"])'</span>
<span id="cb3-29">        agents:</span>
<span id="cb3-30">          queue: "juliagpu"</span>
<span id="cb3-31">          rocm: "*"</span>
<span id="cb3-32">        timeout_in_minutes: 60</span></code></pre></div>
<p>We also decided that in addition to a testing CI, it would also be helpful to have a benchmarking CI to track performance changes resulting from each commit to the main branch of the repository. <a href="https://github.com/LuxDL/Lux.jl">Lux.jl</a> had a very nice-looking benchmarking page, so I decided to look into their approach. They were using <a href="https://github.com/benchmark-action/github-action-benchmark">github-action-benchmark</a>, a popular benchmarking action that integrates with the Julia package <a href="https://github.com/JuliaCI/BenchmarkTools.jl"><code>BenchmarkTools.jl</code></a>. github-action-benchmark does two very useful things:</p>
<ol type="1">
<li><p>Collects benchmarking data into a json file and provides a default index.html to display this data. If put inside a relative path in the gh-pages branch of a repository, this results in a public benchmarking page which is automatically updated after each commit!</p></li>
<li><p>Comments on a pull request with the benchmarking results compared with before the pull request. Example: https://github.com/JuliaHealth/KomaMRI.jl/pull/442#pullrequestreview-2213921334</p></li>
</ol>
<p>The only issue was that since github-action-benchmark is a github action, it is meant to be run within github by one of the available github runners. While this works for CPU benchmarking, only Buildkite has the CI setup for each of the GPU backends we are using, and Lux.jl’s benchmarks page only included CPU benchmarks, not GPU benchmarks (Note: we talked with Avik, the repository owner of Lux.jl, and Lux.jl has since adopted the approach outlined below to display GPU and CPU benchmarks together). I was not able to find any examples of other julia packages using github-action-benchmark for GPU benchmarking.</p>
<p>Fortunately, there is a tool someone developed to download results from Buildkite into a github action (https://github.com/EnricoMi/download-buildkite-artifact-action). This repository only had 1 star when I found it, but it does exactly what we needed: it identifies the corresponding Buildkite build for a commit, waits for it to finish, and then downloads the artifacts for the build into the github action it is being run from. With this, we were able to download the Buildkite benchmark results from a final aggregation step into our benchmarking action and upload to github-action-benchmark to publish to either the main data.js file for our benchmarking website, or pull request.</p>
<p>Our final benchmarking page looks like this and is <a href="https://juliahealth.org/KomaMRI.jl/benchmarks/">publicly accessible</a>:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Benchmark_Page.png" class="img-fluid"></p>
<p>One neat thing about github-action-benchmark is that the default index.html is extensible, so even though by deault it only shows time, the information for memory usage and number of allocations is also collected into the json file, and can be displayed as well.</p>
<p>A successful CI run on Buildkite Looks like <a href="https://buildkite.com/julialang/komamri-dot-jl/builds/925">this</a>:</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/CI_Run.png" class="img-fluid"></p>
<p>The pull requests for creating the CI testing and benchmarking pipeline, and changing the index.html for our benchmark page are listed below:</p>
<ol type="1">
<li>https://github.com/JuliaHealth/KomaMRI.jl/pull/411</li>
<li>https://github.com/JuliaHealth/KomaMRI.jl/pull/418</li>
<li>https://github.com/JuliaHealth/KomaMRI.jl/pull/421</li>
</ol>
</section>
<section id="step-3-optimization" class="level1">
<h1>Step 3: Optimization</h1>
<p>With support for multiple backends enabled, and a robust CI, the next step was to optimize our simulation code as much as possible. Our original idea was to create a new GPU-optimized simulation method, but before doing this we wanted to look more at the existing code and optimize for the CPU.</p>
<p>The simulation code is solving a differential equation (the [Bloch equations(https://en.wikipedia.org/wiki/Bloch_equations)]) over time. Most differential equation solvers step through time, updating the current state at each time step, but our previous simulation code, more optimized for the GPU, did a lot of computations across all time points in a simulation block, allocating a matrix of size <code>Nspins by NΔt</code> each time this was done. Although this is beneficial for the GPU, where there are millions of threads available on which to parallelize these computations, for the CPU it is more important to conserve memory, and the aforementioned approach of stepping through time is preferable.</p>
<p>After seeing that this approach did help speed up simulation time on the CPU, but was not faster on the GPU (7x slower for Metal!) we decided to separate our simulation code for the GPU and CPU, dispatching based on the <code>KernelAbstractions.Backend</code> type depending on if it is <code>&lt;:KernelAbstractions.CPU</code> or <code>&lt;:KernelAbstractions.GPU</code>.</p>
<p>Other things we were able to do to speed up CPU computation time:</p>
<ol type="1">
<li><p>Preallocating each array used inside the core simulation code so it can be re-used from one simulation block to the next.</p></li>
<li><p><a href="https://github.com/JuliaHealth/KomaMRI.jl/blob/master/KomaMRICore/src/simulation/SimMethods/Bloch/BlochCPU.jl#L90">Skipping an expensive computation</a> if the magnetization at that time point is not added to the final signal</p></li>
<li><p>Ensuring that each statement is fully broadcasted. We were surprised to see the difference between the following examples:</p></li>
</ol>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Fast</span></span>
<span id="cb4-2">Bz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> p.Δw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">./</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>π <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> γ)</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Slow</span></span>
<span id="cb4-5">Bz <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.*</span> seq.Gz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.+</span> p.Δw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">T</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>π <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> γ)</span></code></pre></div>
<ol start="4" type="1">
<li>Using the <code>cis</code> function for complex exponentiation, which is faster than <code>exp</code></li>
</ol>
<p>With these changes, the mean improvement in simulation time aggregating across each of our benchmarks for 1, 2, 4, and 8 CPU threads was ~4.28. For 1 thread, the average improvement in memory usage was 90x!</p>
<p>The next task was optimizing the simulation code for the GPU. Although our original idea was to put everything into one GPU kernel, we found that the existing broadcasting operations were already very fast, and that custom kernels we wrote were not able to outperform the previous implementation. The Julia GPU compiler team deserves a lot of credit for developing such fast broadcasting implementations!</p>
<p>However, this does not mean that we were unable to improve the GPU simulation time. Similar to with the CPU, preallocation made a substantial difference. Parallelizing as much work as possible across the time points for a simulation block was also found to beneficial. For the parts that needed to be done sequentially, a <a href="https://github.com/JuliaHealth/KomaMRI.jl/blob/master/KomaMRICore/src/simulation/SimMethods/Bloch/KernelFunctions.jl#L5">custom GPU kernel</a> was written which used the <code>KernelAbstractions.@localmem</code> macro for arrays being updated at each time step to yield faster memory access.</p>
<p>The mean speedup we saw across the 4 supported GPU backends was 4.16, although this varied accross each backend (for example, CUDA was only 2.66x faster while oneAPI was 28x faster). There is a <a href="https://github.com/JuliaHealth/KomaMRI.jl/blob/master/KomaMRICore/src/simulation/SimMethods/Bloch/BlochGPU.jl#L151">remaining bottleneck</a> in the <code>run_spin_preceession!</code> function having to do with logical indexing that I was not able to resolve, but could be solved in the future to speed up the GPU simulation time even further!</p>
<p>The pull requests optimizing code for the CPU and GPU are below:</p>
<ol type="1">
<li><p>https://github.com/JuliaHealth/KomaMRI.jl/pull/443</p></li>
<li><p>https://github.com/JuliaHealth/KomaMRI.jl/pull/459</p></li>
<li><p>https://github.com/JuliaHealth/KomaMRI.jl/pull/462</p></li>
</ol>
</section>
<section id="step-4-distributed-support" class="level1">
<h1>4. Step 4: Distributed Support</h1>
<p>This last step was a stretch goal for exploring how to add distributed support to KomaMRI. MRI simulations can become quite large, so it is useful to be able to distribute work across either multiple GPUs or multiple compute nodes.</p>
<p>A nice thing about MRI simulation is the independent spin property: if a phantom object (representing, for example a brain tissue slice) is divided into two parts, and each part is simulated separately, the signal result from simulating the whole phantom will be equal to the sum of the signal results from simulating each subdivision of the original phantom. This makes it quite easy to distribute work, either across more than one GPU or accross multiple compute nodes.</p>
<p>The following scripts worked, with the only necessary code change to the repository being a new + function to add two RawAcquisitionData structs:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Use multiple GPUs:</span></span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span></span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CUDA</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Add workers based on the number of available devices</span></span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addprocs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">devices</span>()))</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Define inputs on each worker process</span></span>
<span id="cb5-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@everywhere</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">begin</span></span>
<span id="cb5-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">KomaMRI</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">CUDA</span></span>
<span id="cb5-11">    sys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Scanner</span>()</span>
<span id="cb5-12">    seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PulseDesigner.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EPI_example</span>()</span>
<span id="cb5-13">    obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brain_phantom2D</span>()</span>
<span id="cb5-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Divide phantom</span></span>
<span id="cb5-15">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kfoldperm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(obj), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>())</span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb5-17"></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Distribute simulation across workers</span></span>
<span id="cb5-19">raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@distributed</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>()</span>
<span id="cb5-20">    KomaMRICore.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set_device!</span>(i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Sets device for this worker, note that CUDA devices are indexed from 0</span></span>
<span id="cb5-21">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(obj[parts[i]], seq, sys)</span>
<span id="cb5-22"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Use multiple compute nodes</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span></span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">ClusterManagers</span></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Add workers based on the specified number of SLURM tasks</span></span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">addprocs</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">SlurmManager</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">parse</span>(<span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">Int</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">ENV</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SLURM_NTASKS"</span>])))</span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Define inputs on each worker process</span></span>
<span id="cb6-9"><span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@everywhere</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">begin</span></span>
<span id="cb6-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">KomaMRI</span></span>
<span id="cb6-11">    sys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Scanner</span>()</span>
<span id="cb6-12">    seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PulseDesigner.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">EPI_example</span>()</span>
<span id="cb6-13">    obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">brain_phantom2D</span>()</span>
<span id="cb6-14">    parts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kfoldperm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(obj), <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>())</span>
<span id="cb6-15"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span>
<span id="cb6-16"></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#Distribute simulation across workers</span></span>
<span id="cb6-18">raw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Distributed</span>.<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">@distributed</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">nworkers</span>()</span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">simulate</span>(obj[parts[i]], seq, sys)</span>
<span id="cb6-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">end</span></span></code></pre></div>
<p>Pull reqeust for adding these examples to the KomaMRI documentation: https://github.com/JuliaHealth/KomaMRI.jl/pull/468</p>
</section>
<section id="conclusions-future-work" class="level1">
<h1>Conclusions / Future Work</h1>
<p>This project was a 350-hour large project, since there were many goals to accomplish. To summarize what changed since the beginning of the project:</p>
<ol type="1">
<li><p>Added support for AMDGPU.jl, Metal.jl, and oneAPI.jl GPU backends</p></li>
<li><p>CI for automated testing and benchmarking accross each backend + <a href="https://juliahealth.org/KomaMRI.jl/benchmarks/">public benchmarks page</a></p></li>
<li><p>Significantly faster CPU and GPU performance</p></li>
<li><p>Demonstrated distributed support and examples added in documentation</p></li>
</ol>
<p>Future work could look at ways to further optimize the simulation code, since despite the progress made, I believe there is more work to be done! The aforementioned logical indexing issue is still not resolved, and the kernel used inside the <code>run_spin_excitation!</code> function has not been profiled in depth. KomaMRI is also looking into adding support for higher-order ODE methods, which could require more GPU kernels being written.</p>
</section>
<section id="acknowledgements" class="level1">
<h1>Acknowledgements</h1>
<p>I would like to thank my mentor, Carlos Castillo, for his help and support on this project. I would also like to thank Jakub Mitura, who attended some of our meetings to help with GPU optimization, Dilum Aluthge who helped set up our BuildKite pipeline, and Tim Besard, who answered many GPU-related questions that Carlos and I had.</p>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{kierulf2024,
  author = {Kierulf, Ryan},
  title = {GSoC ’24: {Enhancements} to {KomaMRI.jl} {GPU} {Support}},
  date = {2024-08-30},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-kierulf2024" class="csl-entry quarto-appendix-citeas">
Kierulf, Ryan. 2024. <span>“GSoC ’24: Enhancements to KomaMRI.jl GPU
Support.”</span> August 30, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html">https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html</a>.
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>mri</category>
  <category>gpu</category>
  <category>hpc</category>
  <category>simulation</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/ryan-gsoc/Ryan_GSOC.html</guid>
  <pubDate>Fri, 30 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>GSoC ’24: IPUMS.jl Small Project</title>
  <dc:creator>Michela Rocchetti</dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html</link>
  <description><![CDATA[ 




<section id="hello" class="level1">
<h1>Hello! 👋</h1>
<p>Hi! I am Michela, I have a Master’s degree in Physics of Complex Systems and I am currently working as a software engineer in Rome, where I am from. During my studies, I became interested in the use of modeling and AI methods to improve healthcare and how these tools can be used to better understand how cultural and social backgrounds influence the health of individuals. I am also interested in the computational modeling of the brain and the human body and its implications for a better understanding of certain pathological conditions.</p>
<p>With these motivations in mind, I heard about Google Summer of Code. Since I had studied Julia in some courses and given that the language is expanding rapidly, I decided to find a project within Julia. As a result, I found the project of <a href="https://jacobzelko.com">Jacob Zelko (<span class="citation" data-cites="TheCedarPrince">@TheCedarPrince</span>)</a> to start this experience.</p>
<blockquote class="blockquote">
<p>If you want to learn more about me, you can connect with me here: <a href="https://www.linkedin.com/in/michela-rocchetti-261793218/"><strong>LinkedIn</strong></a>, <a href="https://github.com/MichelaRocchetti"><strong>GitHub</strong></a></p>
</blockquote>
</section>
<section id="project-description" class="level1">
<h1>Project Description</h1>
<p><em>IPUMS</em> is the “world’s largest available single database of census microdata”, providing survey and census data from around the world. It includes several projects that provide a wide variety of datasets. The information and data collected by <em>IPUMS</em> are useful for comparative research, as well as for the analysis of individuals in their life contexts. These data can be used to create a more comprehensive dataset that will facilitate research on the social determinants of health for different types of diseases, social communities, and geographical areas.</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/IPUMS_grid_logo.png" class="img-fluid"></p>
<blockquote class="blockquote">
<p>To learn more about IPUMS, visit the <a href="https://www.ipums.org">website</a></p>
</blockquote>
</section>
<section id="tasks-and-goals" class="level1">
<h1>Tasks and Goals</h1>
<p>The primary objectives of this proposal are to:</p>
<ol type="1">
<li><p>Develop a native Julia package to interact with the APIs available around the datasets <em>IPUMS</em> provides.</p></li>
<li><p>Provide useful utilities within this package for manipulating <em>IPUMS</em> datasets.</p></li>
<li><p>Compose this package with the wider Julia ecosystem to enable novel research in health, economics, and more.</p></li>
</ol>
<p>To achieve this, the work was distributed as follows:</p>
<ol type="1">
<li>Expand some of the functionality developed in <code>ipumsr</code> <em>IPUMS</em> NHGIS
<ul>
<li>Create a link between OpenAPI documentation and the functions internally used in IPUMS.jl: updating already present functions, determining if updating is needed, and testing them</li>
<li>Develop functionality similar to the get_metadata_nghis function present in ipumsr</li>
</ul></li>
<li>Update <em>IPUMS</em> documentation
<ul>
<li>Set up and deploy DocumenterVitepress.jl<br>
</li>
<li>Write a blog post on how IPUMS.jl can be composed within the ecosystem.</li>
</ul></li>
</ol>
</section>
<section id="how-the-work-was-done" class="level1">
<h1>How the work was done</h1>
<p>The first task was to migrate documents from Documenter to DocumenterVitepress.This issue aims to support the significant refactoring underway across JuliaHealth, aimed at improving the discoverability and cohesion of the JuliaHealth ecosystem, particularly about documentation. This issue is intended to create a more attractive entry point for new Julia users interested in health research within the Julia community. To accomplish this task, a dependency of DocumenterVitepress was added to the docs directory of the IPUMS.jl repository. Once this was done, the Documenter.jl make.jl file was migrated into a DocumenterVitepress.jl make.jl file. Working on the make.jl file, the pages structure were added to the web page explaining the IPUMS.jl package. With this in mind, those were added: 1. Home: to explain the main purpose of the package 2. Workflows: to explain the working process 3. How to: to give general information 4. Tutorials: to show how to use IPUMS.jl<br>
5. Examples: some examples of activities 6. Mission: to explain why the package is useful for the community 7. References: references used to write the pages.</p>
<p>This first task takes some time, especially setting up GitHub and cloning the repository locally. At this point, my experience with GitHub was really limited and I had to learn how to use the Git environment from scratch, for example how to do continuous integration (to commit code to a shared repository), documentation release and merge, and local testing. I found the support of my mentors and searching for material online was really helpful.</p>
<p>The second task was to update the documentation of IPUMS.jl by modifying the functionality within the model folder in the IPUMS.jl folder. The main aim of this task was to a description of the function and its attributes, an example of possible implementation and result, and finally to show how to use it. The documentation to be updated as of several types of functions: 1. Data extract 2. Data set 3. Data Table 4. Time series table 5. Error 6. Shapefile. Each of these macro-categories (from 1 to 4) contains a set of functions, each signaling the different expected output and specific purpose. Information about what each function does, and the meaning of each specific input variable, has been found on the <em>IPUMS</em> website and references have been made in the written documentation.</p>
</section>
<section id="how-to-work-with-ipums" class="level1">
<h1>How to work with IPUMS</h1>
<p>After writing down the description of the function and the inputs, examples were formulated, starting from the <em>IPUMS</em> website: when you register at <a href="https://uma.pop.umn.edu/usa/user/new">IPUMS</a>, an API key is given. which is used, among other things, to run pre-written code on the website. This code contains examples of these functions, and these examples have been adapted by changing some input values and adapting them to work in the Julia framework. The latter task was done by simply rewriting some structures, such as dictionaries, maps, or lists, in the Julia language. Here is a small guide on how to set up working with the API: 1. Create an <em>IPUMS</em> account 2. Log in to your account 3. Copy the API key, which can be obtained from the <a href="https://account.ipums.org/api_keys">website</a> 4. Use the key to run the code that is already available on the <a href="https://developer.ipums.org/docs/v2/reference/"><em>IPUMS</em> Developer Portal</a>, where you will also find information about the variables and packages.</p>
</section>
<section id="functions-testing" class="level1">
<h1>Functions testing</h1>
<p>A final task was to test the functions in the ‘api_IPUMSAPI.jl’ file. In this file, the function to be tested and other functions are defined and the most important ones are extracted to be available in the available throughout the framework. Some of the functions to be tested were the following:</p>
<ol type="1">
<li><code>metadata_nhgis_data_tables_get</code></li>
<li><code>metadata_nhgis_datasets_dataset_data_tables_data_table_get</code></li>
<li><code>metadata_nhgis_datasets_dataset_get</code></li>
<li><code>metadata_nhgis_datasets_get</code></li>
</ol>
<p>Before working on the Julia files, testing and understanding the original R function was done using R studio.</p>
<p><img src="https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/rstudio.png" class="img-fluid"></p>
<p>Each function was then tested using the API key from the <em>IPUMS</em> registration as well as other input examples taken from the documentation or the <em>IPUMS</em> website. or from the <em>IPUMS</em> website. All functions were displayed successfully, giving the expected result, so it can be concluded that the translation from R to Julia is successful.</p>
<div id="2" class="cell" data-execution_count="0">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">IPUMS</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">using</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">OpenAPI</span></span>
<span id="cb1-3"></span>
<span id="cb1-4">api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"insert your key here"</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span></span>
<span id="cb1-7">page_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-8">page_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2500</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#media_type = </span></span>
<span id="cb1-10"></span>
<span id="cb1-11">api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">IPUMSAPI</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://api.ipums.org"</span>, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Dict</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Authorization"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&gt;</span> api_key));</span>
<span id="cb1-12"></span>
<span id="cb1-13">res1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_data_tables_get</span>(api, version)</span>
<span id="cb1-14"></span>
<span id="cb1-15">res2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_datasets_dataset_get</span>(api, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022_ACS1"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>);</span>
<span id="cb1-16"></span>
<span id="cb1-17">res3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_datasets_dataset_data_tables_data_table_get</span>(api, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2022_ACS1"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"B01001"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>);</span>
<span id="cb1-18"></span>
<span id="cb1-19">res4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">metadata_nhgis_datasets_get</span>(api, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2"</span>);</span></code></pre></div>
</details>
</div>
<p>An example of the output is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode numberSource {json} number-lines code-with-copy"><code class="sourceCode"><span id="cb2-1">. . .</span>
<span id="cb2-2"></span>
<span id="cb2-3">{</span>
<span id="cb2-4">  "name": "NT1",</span>
<span id="cb2-5">  "nhgisCode": "AAA",</span>
<span id="cb2-6">  "description": "Total Population",</span>
<span id="cb2-7">  "universe": "Persons",</span>
<span id="cb2-8">  "sequence": 1,</span>
<span id="cb2-9">  "datasetName": "1790_cPop",</span>
<span id="cb2-10">  "nVariables": [</span>
<span id="cb2-11">    1</span>
<span id="cb2-12">  ]</span>
<span id="cb2-13">}</span>
<span id="cb2-14"></span>
<span id="cb2-15">. . .</span></code></pre></div>
</section>
<section id="accomplished-goals-and-future-development" class="level1">
<h1>Accomplished Goals and Future Development</h1>
<p>The project was a 90-hour small project and during this time the documentation was completed and the testing of the metadata function was done, as well as the migration from Documenter.jl to DocumenterVitepress.jl. During these months some things took longer than I expected because of some problems that occurred, so some things were missing in relation to the original plan. However, this time was useful for learning new things: - I saw how to work with a package under development, how to work with large datasets, and how to write documentation - I had the opportunity to better understand how to work with Git and GitHub - I learned some new things about R, which was a completely unknown language to me. - I deepened my knowledge of Julia, a language I had worked with during my time at university. - I had the chance to work on a large open-source project, to be part of a large community, and to learn how to communicate with it efficiently.</p>
<p>A special thanks goes to my mentors, Jacob Zelko and Krishna Bhogaonker, for helping me through this process.</p>
<p>Future developments of this work could include deepening the work that my mentors and I have started, with the possibility of integrating this package with other machine learning packages in Julia and, from there, doing new analyses of the data in terms of social and geographical implications for health.</p>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{rocchetti2024,
  author = {Rocchetti, Michela},
  title = {GSoC ’24: {IPUMS.jl} {Small} {Project}},
  date = {2024-08-26},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-rocchetti2024" class="csl-entry quarto-appendix-citeas">
Rocchetti, Michela. 2024. <span>“GSoC ’24: IPUMS.jl Small
Project.”</span> August 26, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html">https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html</a>.
</div></div></section></div> ]]></description>
  <category>gsoc</category>
  <category>geospatial</category>
  <category>census</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/michela-gsoc/Michela_JSoC.html</guid>
  <pubDate>Mon, 26 Aug 2024 04:00:00 GMT</pubDate>
</item>
<item>
  <title>Dummy Post</title>
  <dc:creator>Foobar </dc:creator>
  <link>https://juliahealth.org/JuliaHealthBlog/posts/dummy/</link>
  <description><![CDATA[ 




<section id="seciton-1" class="level1">
<h1>Seciton 1</h1>
<p>Small dummy blog post</p>
<div id="2" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb1-1"><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>4</code></pre>
</div>
</div>
<div id="4" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode numberSource julia number-lines code-with-copy"><code class="sourceCode julia"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">println</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4</code></pre>
</div>
</div>
</section>
<section id="section-2" class="level1">
<h1>Section 2</h1>
</section>
<section id="section-3" class="level1">
<h1>Section 3</h1>


<!-- -->

</section>

<a onclick="window.scrollTo(0, 0); return false;" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a><div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{2024,
  author = {, Foobar},
  title = {Dummy {Post}},
  date = {2024-06-22},
  url = {https://juliahealth.org/JuliaHealthBlog/posts/dummy/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-2024" class="csl-entry quarto-appendix-citeas">
Foobar. 2024. <span>“Dummy Post.”</span> June 22, 2024. <a href="https://juliahealth.org/JuliaHealthBlog/posts/dummy/">https://juliahealth.org/JuliaHealthBlog/posts/dummy/</a>.
</div></div></section></div> ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://juliahealth.org/JuliaHealthBlog/posts/dummy/</guid>
  <pubDate>Sat, 22 Jun 2024 04:00:00 GMT</pubDate>
</item>
</channel>
</rss>
